<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh" /><updated>2018-10-30T17:36:05+08:00</updated><id>http://localhost:4000/</id><title type="html">Renyou’s blog</title><subtitle>Renyou's Blog | 卢任有的博客
</subtitle><author><name>Renyoulu</name><email>Renyou_Lu@yeah.net</email></author><entry><title type="html">DSP将flash中的程序复制到sram运行</title><link href="http://localhost:4000/blog/2018/10/30/DSP_FLASH_COPY_TO_FLASH.html" rel="alternate" type="text/html" title="DSP将flash中的程序复制到sram运行" /><published>2018-10-30T00:00:00+08:00</published><updated>2018-10-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/2018/10/30/DSP_FLASH_COPY_TO_FLASH</id><content type="html" xml:base="http://localhost:4000/blog/2018/10/30/DSP_FLASH_COPY_TO_FLASH.html">&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/10/30/i2LMWV.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在我们实际的项目当中，有时候仅仅烧写在Flash中的速度跟我们方针的时候是完全不一样的，仿真的时候可以实现的功能可能一烧写进FLASH中就没有了效果，这就需要我们把FLASH中的程序复制到SRAM中运行。&lt;!--more--&gt;在flash中和SRAM之所以不一样，是因为FLSAH的速度实在是有限，一旦遇到一些高速信号，例如高频的PWM波就没辙了，只有把程序复制到SRAM中才能和仿真的时候一样。如果如何烧写不清楚，可以参考上一篇博客&lt;img src=&quot;https://renyoulu.com/blog/2018/10/30/DSP_Flash%E7%83%A7%E5%86%99%E6%AD%A5%E9%AA%A4.html&quot; alt=&quot;DSP烧写进FLASH&quot; /&gt;&lt;/p&gt;

&lt;p&gt;废话不多说直接上手做。
&lt;em&gt;注：本文中最后修改好的文件在文末下载链接当中&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;1添加dsp28xxx_sectioncopy_nonbiosasm到工程目录下&quot;&gt;1.添加DSP28xxx_SectionCopy_nonBIOS.asm到工程目录下&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DSP28xxx_SectionCopy_nonBIOS.asm&lt;/code&gt;中为程序拷贝函数。定义了段名为&lt;strong&gt;copysections&lt;/strong&gt;，之后将会在&lt;strong&gt;CMD&lt;/strong&gt;文件添加该段。&lt;/p&gt;

&lt;h2 id=&quot;2修改启动文件dsp2833x_codestartbranchasm&quot;&gt;2.修改启动文件DSP2833x_CodeStartBranch.asm&lt;/h2&gt;

&lt;p&gt;有些时候程序的执行对于速度要求很高，此时就需要将程序整体拷贝到&lt;strong&gt;RAM&lt;/strong&gt;中去执行。程序整体拷贝同样需要进行特殊修改和设置。要想详细了解下面设置的原理，可以查找相关资料来详细了解程序启动的过程。&lt;/p&gt;
&lt;h3 id=&quot;1程序启动的过程一般为&quot;&gt;1.程序启动的过程一般为：&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
    code_start--&amp;gt;wd_disable;
    wd_disable--&amp;gt;c_int00-;
    c_int00---&amp;gt;mian（）;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了完成程序的拷贝，需要在C语言初始化之前插入一个程序拷贝的环节，修改之后的流程为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
    code_start--&amp;gt;wd_disable;
    wd_disable--&amp;gt;copy_sections;
    copy_sections---&amp;gt;c_int00-;
    c_int00---&amp;gt;mian（）;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为此在&lt;code class=&quot;highlighter-rouge&quot;&gt;DSP2833x_CodeStartBranch.asm&lt;/code&gt;中将所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;c_int00&lt;/code&gt;替换为&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_sections&lt;/code&gt;。如下&lt;strong&gt;2.1&lt;/strong&gt;步骤&lt;/p&gt;

&lt;p&gt;程序运行后从&lt;strong&gt;FLASH&lt;/strong&gt;启动，会调用&lt;strong&gt;code_start&lt;/strong&gt;关闭看门狗后通过调用&lt;strong&gt;c_int00&lt;/strong&gt;，通过&lt;strong&gt;c_int00&lt;/strong&gt;调用&lt;strong&gt;main（）&lt;/strong&gt;函数，所以程序从&lt;strong&gt;FLASH&lt;/strong&gt;拷贝到&lt;strong&gt;RAM&lt;/strong&gt;需要在&lt;strong&gt;c_int00&lt;/strong&gt;之前完成。所以将做以下修改：&lt;/p&gt;

&lt;h3 id=&quot;21-将程序中的_c_int00修改为-copy_sections&quot;&gt;2.1 将程序中的_c_int00修改为 copy_sections&lt;/h3&gt;
&lt;h3 id=&quot;22-将text-修改为sect-wddisable&quot;&gt;2.2 将.text 修改为.sect “wddisable”&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;修改解释：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WD_DISABLE .set 1 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to 1 to disable WD, &lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to 0

.ref _c_int00   &lt;span class=&quot;c&quot;&gt;#（这里不需要使用_c_int00二是需要调用copy_sections函数，故改为.ref copy_sections）&lt;/span&gt;

    .global code_start

    .sect &lt;span class=&quot;s2&quot;&gt;&quot;codestart&quot;&lt;/span&gt;

code_start:

    .if WD_DISABLE &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1

        LB wd_disable       

    .else

        LB _c_int00 &lt;span class=&quot;c&quot;&gt;#(这里应该跳转到copy_sections，故应改为LB copy_sections)&lt;/span&gt;

.endif

    .if WD_DISABLE &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 1

    .text &lt;span class=&quot;c&quot;&gt;#（.text段将会加载到RAM中运行，这里看门狗程序是需要在拷贝前，也就是FLASH中运行，所以从新定义一个wddisable段，之后将会添加到.CMD文件，所以修改为.sect &quot;wddisable&quot; 之所以这么定义，是因为.text段是需要拷贝到RAM执行的，而在程序拷贝之前首先需要关闭看门狗，从而避免出现错误。如果仍然将程序放在.text段中，则看门狗禁止程序无法执行，会出现错误，因此在FLASH中定义一个新的段，从而让看门狗关闭的程序在FLASH中提前执行）&lt;/span&gt;

wd_disable:

    SETC OBJMODE        &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;Set OBJMODE &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;28x object code

    EALLOW              &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;Enable EALLOW protected register access

    MOVZ DP, &lt;span class=&quot;c&quot;&gt;#7029h&amp;gt;&amp;gt;6  ;Set data page for WDCR register&lt;/span&gt;

    MOV @7029h, &lt;span class=&quot;c&quot;&gt;#0068h  ;Set WDDIS bit in WDCR to disable WD&lt;/span&gt;

    EDIS                &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;Disable EALLOW protected register access

    LB _c_int00  &lt;span class=&quot;c&quot;&gt;#（这里关闭看门狗后需要调用拷贝函数在跳转到_C_INT00所以改为LB copy_sections）       &lt;/span&gt;

    .endif

.end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3修改dsp2833x_sysctrlc文件&quot;&gt;3.修改DSP2833x_SysCtrl.c文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注释掉一些程序&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#pragma CODE_SECTION(InitFlash, &quot;ramfuncs&quot;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程序定义了&lt;strong&gt;ramfuncs&lt;/strong&gt;段，当在&lt;strong&gt;FLASH&lt;/strong&gt;中运行时，由于速度问题，部分函数必须在&lt;strong&gt;RAM&lt;/strong&gt;中运行，这段程序的作用就是声明&lt;strong&gt;IinitFlash&lt;/strong&gt; 函数属于&lt;strong&gt;ramfunc&lt;/strong&gt;段，需在&lt;strong&gt;RAM&lt;/strong&gt;中运行，我们把所有程序加载到&lt;strong&gt;RAM&lt;/strong&gt;中运行，故不再需要，注释掉后默认在&lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt;段&lt;/p&gt;

&lt;h2 id=&quot;4-修改dsp2833x_usdelayasm文件&quot;&gt;4. 修改DSP2833x_usDelay.asm文件&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.def _DSP28x_usDelay

.sect &lt;span class=&quot;s2&quot;&gt;&quot;ramfuncs&quot;&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;bash

改为

&lt;span class=&quot;sb&quot;&gt;```&lt;/span&gt;bash
.def _DSP28x_usDelay

.text

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原理同上&lt;/p&gt;

&lt;h2 id=&quot;5-cmd文件修改&quot;&gt;5. CMD文件修改&lt;/h2&gt;

&lt;h3 id=&quot;51-删除相关代码&quot;&gt;5.1 ：删除相关代码&lt;/h3&gt;
&lt;p&gt;删除类似以下ramfuncs&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ramfuncs            : LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHD, 
                    RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAML0, 
                    LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_RamfuncsLoadStart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
                    LOAD_END&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_RamfuncsLoadEnd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
                    RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_RamfuncsRunStart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
                    PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Ramfuncs&lt;/strong&gt;段是之前在&lt;strong&gt;FLASH&lt;/strong&gt;中运行时需要把部分程序搬移到&lt;strong&gt;RAM&lt;/strong&gt;中定义的段，  &lt;code class=&quot;highlighter-rouge&quot;&gt;_DSP28x_usDelay&lt;/code&gt;函数就定义在该段，现在要把所有程序都搬到&lt;strong&gt;RAM&lt;/strong&gt;中，故不再需要。&lt;/p&gt;

&lt;h3 id=&quot;52添加代码&quot;&gt;5.2：添加代码&lt;/h3&gt;
&lt;p&gt;（通常添加在codestart  : &amp;gt; BEGIN,  PAGE = 0）之后&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wddisable    : &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; FLASHA,    PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
copysections        : &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; FLASHA,    PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Wddisable&lt;/strong&gt;与&lt;strong&gt;copysections&lt;/strong&gt;是新添加的段，&lt;strong&gt;Wddisable&lt;/strong&gt;是之前将&lt;code class=&quot;highlighter-rouge&quot;&gt;DSP2833x_CodeStartBranch.asm&lt;/code&gt;中关闭看门狗的代码放在了&lt;strong&gt;Wddisable&lt;/strong&gt;段，该段需在&lt;strong&gt;FLASH&lt;/strong&gt;中运行。&lt;strong&gt;Copysections&lt;/strong&gt;是拷贝函数所在的断，需在&lt;strong&gt;Flash&lt;/strong&gt;中完成拷贝。&lt;/p&gt;

&lt;h3 id=&quot;53修改stack-栈-ebss全局数据静态数据-esysmem堆&quot;&gt;5.3：修改.stack 栈 .ebss全局数据、静态数据 .esysmem堆&lt;/h3&gt;
&lt;p&gt;可以修改他们的存储大小与位置，但必须在低64K地址中即（M0，M1，L4-L7）(L1 -L3受保护的，放代码段的）。例如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.stack              : &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; RAMM1       PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
.ebss               : &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; RAML4       PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
.esysmem            : &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; RAML4       PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;5-4修改代码存储位置与运行位置&quot;&gt;5. 4：修改代码存储位置与运行位置&lt;/h3&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;.cinit              : &amp;gt; FLASHA      PAGE = 0&lt;/code&gt;改为&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.cinit : LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHA, PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0       

                 RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAML0,       PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0   

                 LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_cinit_loadstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_cinit_runstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                  SIZE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_cinit_size&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将程序中变量初值和常量加载到&lt;strong&gt;FLASH&lt;/strong&gt;运行在&lt;strong&gt;RAM&lt;/strong&gt;中&lt;/p&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;.econst             : &amp;gt; FLASHA      PAGE = 0&lt;/code&gt;改为&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.econst :   LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHA,   PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0       

                 RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAML0,       PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_econst_loadstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_econst_runstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 SIZE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_econst_size&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;.pinit              : &amp;gt; FLASHA,     PAGE = 0 &lt;/code&gt;改为&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
.pinit :   LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHA,   PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0         

                 RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAML0, PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_pinit_loadstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_pinit_runstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 SIZE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_pinit_size&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;.switch             : &amp;gt; FLASHA      PAGE = 0  &lt;/code&gt;修改为&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.switch :   LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHA,   PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAML0,       PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0       

                 LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_switch_loadstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_switch_runstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 SIZE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_switch_size&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;增加&lt;code class=&quot;highlighter-rouge&quot;&gt;.const&lt;/code&gt;段的定义，或者将拷贝函数中&lt;code class=&quot;highlighter-rouge&quot;&gt;.const&lt;/code&gt;的拷贝注释掉&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.const :   LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHA,   PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAML0, PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_const_loadstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_const_runstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 SIZE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_const_size&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5-5修改text段&quot;&gt;5. 5修改.text段&lt;/h3&gt;

&lt;p&gt;为了保证足够代码空间，修改MEMORY PAGE 0中&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RAML1       : origin &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x009000, length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x001000        

 RAML2       : origin &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x00A000, length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x001000     

 RAML3       : origin &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x00B000, length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x001000  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;改为&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  RAM_L1L2L3       : origin &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x009000, length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x003000  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后将SECTIONS中&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.text               : &amp;gt; FLASHA      PAGE = 0&lt;/code&gt;改为&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.text :   LOAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; FLASHA,  PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 RUN &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; RAM_L1L2L3, PAGE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0        

                 LOAD_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_text_loadstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 RUN_START&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_text_runstart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,

                 SIZE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_text_size&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;6rebuild--project-和烧写&quot;&gt;6.rebuild  project 和烧写&lt;/h2&gt;
&lt;p&gt;方法和debug一样&lt;/p&gt;

&lt;p&gt;&lt;em&gt;备注：本文一共需要需要的文件均已经修改和添加在附件文件下【flash-sram】中&lt;/em&gt;
【百度云下载链接】：&lt;a href=&quot;https://pan.baidu.com/s/10LwtP3d7IoOeleQKL-Z0pw&quot;&gt;【flash-sram&lt;/a&gt;
【提取码】： 3xi2&lt;/p&gt;</content><author><name>Renyoulu</name><email>Renyou_Lu@yeah.net</email></author><category term="blog" /><category term="DSP" /><category term="Flash" /><category term="Sram" /><category term="嵌入式" /><summary type="html">在我们实际的项目当中，有时候仅仅烧写在Flash中的速度跟我们方针的时候是完全不一样的，仿真的时候可以实现的功能可能一烧写进FLASH中就没有了效果，这就需要我们把FLASH中的程序复制到SRAM中运行。</summary></entry><entry><title type="html">DSP烧写进flash的方法（F28335）</title><link href="http://localhost:4000/blog/2018/10/29/DSP_Flash%E7%83%A7%E5%86%99%E6%AD%A5%E9%AA%A4.html" rel="alternate" type="text/html" title="DSP烧写进flash的方法（F28335）" /><published>2018-10-29T00:00:00+08:00</published><updated>2018-10-29T00:00:00+08:00</updated><id>http://localhost:4000/blog/2018/10/29/DSP_Flash%E7%83%A7%E5%86%99%E6%AD%A5%E9%AA%A4</id><content type="html" xml:base="http://localhost:4000/blog/2018/10/29/DSP_Flash%E7%83%A7%E5%86%99%E6%AD%A5%E9%AA%A4.html">&lt;p&gt;&lt;img src=&quot;https://s1.ax2x.com/2018/10/30/5X6lXK.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在使用DSP的时候如何烧写程序是一个比较头疼的问题，像在STM32上面直接使用仿真器就可以进行烧写，不需要做什么额外的事情，但是在DSP里面，平时的程序经过仿真器只是将程序复制到了Sram里面，我们烧写程序需要对我们的工程做一些改变，才能顺利的烧写程序&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;大概的步骤如下&quot;&gt;大概的步骤如下&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;检查map文件&lt;/li&gt;
  &lt;li&gt;修改F28335.CMD文件&lt;/li&gt;
  &lt;li&gt;增加代码跳转文件&lt;/li&gt;
  &lt;li&gt;生成可执行文件&lt;/li&gt;
  &lt;li&gt;烧写可执行文件&lt;/li&gt;
  &lt;li&gt;验证程序是否烧写到FLash中
&lt;em&gt;（注：本文的使用的工程是DSP官方提供的框架和文件，DSP型号为C2000系列Tms320F28335）&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1检查map文件&quot;&gt;1.检查map文件&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;origin&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;length&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;used&lt;/th&gt;
      &lt;th&gt;unused&lt;/th&gt;
      &lt;th&gt;attr&lt;/th&gt;
      &lt;th&gt;fill&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CSM_PWL&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0033fff8&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;00000008&lt;/td&gt;
      &lt;td&gt;00000000&lt;/td&gt;
      &lt;td&gt;00000008&lt;/td&gt;
      &lt;td&gt;RWIX&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;used&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;unused&lt;/code&gt;对应的值分别为00和08，如上，则标识密码区域尚未使用，否则密码区域可能已经被使用，不可以进行烧写，若强行烧写将导致DSP锁死，此时可以自己重新新建工程进行编译。&lt;/p&gt;

&lt;p&gt;检查密码区域无误之后可以进行下一步操作。&lt;/p&gt;

&lt;h2 id=&quot;2修改f28335cmd文件&quot;&gt;2．修改F28335.CMD文件&lt;/h2&gt;

&lt;p&gt;项目创建之后，会自动生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;28335_RAM_lnk.cmd&lt;/code&gt;文件，该文件是我们进行仿真调试的时候，将程序放入RAM中运行的CMD文件，如果需要烧写到Flash中，则需要修改对应的地址，因此，可以更改cmd中对应的地址位置或者我们重新创建一个烧写Flash对应的cmd文件。&lt;/p&gt;

&lt;p&gt;我们可以从其他项目例程中拷贝一个往Flash中烧写的cmd文件，同一芯片往flash中烧写的cmd文件都相同，因此直接拷贝一个过来(一般名称为&lt;code class=&quot;highlighter-rouge&quot;&gt;F28335.cmd&lt;/code&gt;),名称可以自己进行修改，或者自己创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xxx.cmd&lt;/code&gt;，&lt;strong&gt;也可在本文文末下载链接下载&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;创建完成cmd文件之后，在CCS6.0中（或之后的版本）右键点击之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;28335_RAM_lnk.cmd&lt;/code&gt;文件，选择&lt;strong&gt;Exculde from Build&lt;/strong&gt;命令，则该文件不参与编译，检查烧写所用的cmd文件，如果没有参与编译，则取消勾选&lt;strong&gt;Exculde from Build&lt;/strong&gt;命令，使该文件参与编译。&lt;/p&gt;

&lt;p&gt;两个cmd文件只能选择其中一个参与编译，否则编译器有可能无法识别具体的操作空间而出错。&lt;/p&gt;

&lt;h2 id=&quot;3增加代码跳转文件&quot;&gt;3.增加代码跳转文件&lt;/h2&gt;

&lt;p&gt;同时我们还需要在原有的调试程序项目中添加跳转代码文件&lt;code class=&quot;highlighter-rouge&quot;&gt;DSP2833x_CodeStartBranch.asm&lt;/code&gt;，在处理器完成引导后跳转到用户应用过程入口。&lt;/p&gt;

&lt;p&gt;同一芯片对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;DSP2833x_CodeStartBranch.asm&lt;/code&gt;文件也相同，因此我们可以从其他例程中拷贝或者自己添加该文件。&lt;strong&gt;本文文末有文件下载连接&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;4生成可执行文件&quot;&gt;4.生成可执行文件&lt;/h2&gt;

&lt;p&gt;点击Build Project进行编译（&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+B&lt;/code&gt;），编译没有错误之后会在&lt;strong&gt;Debug&lt;/strong&gt;目录下生成&lt;code class=&quot;highlighter-rouge&quot;&gt;.out&lt;/code&gt;文件，该文件就是我们往Flash中烧写的文件。&lt;/p&gt;

&lt;h2 id=&quot;5烧写可执行文件&quot;&gt;5.烧写可执行文件&lt;/h2&gt;

&lt;p&gt;之后的过程与仿真时候Debug的过程相同。&lt;/p&gt;

&lt;h2 id=&quot;6验证程序是否烧写到flash中&quot;&gt;6.验证程序是否烧写到FLash中&lt;/h2&gt;

&lt;p&gt;程序烧写完成之后，给板子断电。通过拨码开关或者其他方式设置&lt;strong&gt;GPIO84/85/86/87&lt;/strong&gt;四个引脚为高电平，则为设置Boot Mod模式为Flash启动，然后重新上电，看程序是否执行。&lt;/p&gt;

&lt;p&gt;断电上电如果程序自动运行，则表明往Flash中烧写成功。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：在程序的下载过程中不要进行断电或者拔掉仿真器，否则有可能造成芯片锁死。&lt;/em&gt;
&lt;em&gt;备注：程序需要的两个文件均已经增加在附件文件下【to-flash】中&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;【百度云下载地址】：&lt;a href=&quot;https://pan.baidu.com/s/1oRmP03ffbbz4iby8_7uaNQ&quot;&gt;to-flash&lt;/a&gt;
【提取码】：u8e5&lt;/p&gt;</content><author><name>Renyoulu</name><email>Renyou_Lu@yeah.net</email></author><category term="blog" /><category term="DSP" /><category term="Flash" /><category term="嵌入式" /><summary type="html">在使用DSP的时候如何烧写程序是一个比较头疼的问题，像在STM32上面直接使用仿真器就可以进行烧写，不需要做什么额外的事情，但是在DSP里面，平时的程序经过仿真器只是将程序复制到了Sram里面，我们烧写程序需要对我们的工程做一些改变，才能顺利的烧写程序</summary></entry><entry><title type="html">部分个人大学期间作品</title><link href="http://localhost:4000/blog/2018/05/17/%E9%83%A8%E5%88%86%E4%B8%AA%E4%BA%BA%E5%A4%A7%E5%AD%A6%E6%9C%9F%E9%97%B4%E4%BD%9C%E5%93%81.html" rel="alternate" type="text/html" title="部分个人大学期间作品" /><published>2018-05-17T00:00:00+08:00</published><updated>2018-05-17T00:00:00+08:00</updated><id>http://localhost:4000/blog/2018/05/17/%E9%83%A8%E5%88%86%E4%B8%AA%E4%BA%BA%E5%A4%A7%E5%AD%A6%E6%9C%9F%E9%97%B4%E4%BD%9C%E5%93%81</id><content type="html" xml:base="http://localhost:4000/blog/2018/05/17/%E9%83%A8%E5%88%86%E4%B8%AA%E4%BA%BA%E5%A4%A7%E5%AD%A6%E6%9C%9F%E9%97%B4%E4%BD%9C%E5%93%81.html">&lt;p&gt;大学期间从大二下半学期开始，在学校的实验室待着，筹备参加比赛和完成一些导师的项目，以下是部分有记录的作品（大牛请忽略…）&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;智能车竞赛&quot;&gt;智能车竞赛&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6YZPP.jpg&quot; alt=&quot;&quot; /&gt;
智能车侧视图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6YMrQ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;智能车俯视图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6YKKg.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;智能车驱动板&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6YnxS.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;智能车核心板&lt;/p&gt;
&lt;h2 id=&quot;项目实验板&quot;&gt;项目实验板&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6Ye8f.jpg&quot; alt=&quot;&quot; /&gt;
左1  门禁实验板；左2 便捷式电压表 ；左3 OLED实验板 ；左4 DC-DC逆变器（自己看了都觉得贼垃圾）&lt;/p&gt;
&lt;h2 id=&quot;电子设计竞赛&quot;&gt;电子设计竞赛&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6Ym28.jpg&quot; alt=&quot;&quot; /&gt;
白光通信实验板和实验框架（金属部分是模拟一个房间，图片没有遮光布； 顶部有三个不同频率的白光光源；房间底部是一个太阳能电池板采集信号；实验板上主要是是三路处理过的带通滤波 ）&lt;/p&gt;
&lt;h2 id=&quot;便捷式心率传感器&quot;&gt;便捷式心率传感器&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6Y3an.jpg&quot; alt=&quot;&quot; /&gt;
自己做的一个心率传感器，可以实时检测心率&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6Y85q.png&quot; alt=&quot;&quot; /&gt;
需要将手指放在黑暗环境准确度高&lt;/p&gt;
&lt;h2 id=&quot;无人快递车&quot;&gt;无人快递车&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/05/17/C6Y1Vs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无人小车局部图，整体由两个平衡车改装，通过差速来转动车体，图为驱动部分。
手机里记录的暂时就这些，后续整理。&lt;/p&gt;</content><author><name>Renyoulu</name><email>Renyou_Lu@yeah.net</email></author><category term="blog" /><category term="作品展示" /><summary type="html">大学期间从大二下半学期开始，在学校的实验室待着，筹备参加比赛和完成一些导师的项目，以下是部分有记录的作品（大牛请忽略…）</summary></entry><entry><title type="html">在Linux上利用Github+jekyll建立个人博客（1）</title><link href="http://localhost:4000/blog/2018/04/30/%E5%9C%A8Linux%E4%B8%8A%E5%88%A9%E7%94%A8Github+jekyll%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1.html" rel="alternate" type="text/html" title="在Linux上利用Github+jekyll建立个人博客（1）" /><published>2018-04-30T00:00:00+08:00</published><updated>2018-04-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/2018/04/30/%E5%9C%A8Linux%E4%B8%8A%E5%88%A9%E7%94%A8Github+jekyll%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)</id><content type="html" xml:base="http://localhost:4000/blog/2018/04/30/%E5%9C%A8Linux%E4%B8%8A%E5%88%A9%E7%94%A8Github+jekyll%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1.html">&lt;p&gt;一直以来都想自己建立一个个人网站，将自己的技术经验和想法分享到网上，今天终于实现了。本人从技术小白的角度分享一下自己在Linux环境下建立个人博客的经验，有讲错的欢迎指正。&lt;!--more--&gt;
&lt;em&gt;注：本博客搭建的系统是 Ubuntu 16.04 LTS 长期支持版本,本文搭建的为最简洁的 &lt;strong&gt;jekyll&lt;/strong&gt; 原生静态页面&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;大概的步骤如下&quot;&gt;大概的步骤如下&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;搭建本地jekyll的运行环境和安装jekyll&lt;/li&gt;
  &lt;li&gt;配置git环境，在github上注册一个你自己的账号，新建仓库&lt;/li&gt;
  &lt;li&gt;将本地博客push（上传）到github的仓库中&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;一github搭建博客的机制你需要知道的&quot;&gt;一、github搭建博客的机制（你需要知道的）&lt;/h2&gt;
&lt;p&gt;github是一个具有版本管理功能的全球开源平台，为了方便使用者，在github上你可以建立自己的仓库，给你免费提供一个G的存储，一个仓库对应一个项目，一个项目可以设置好几个分支。github人性化的在于他给每一个仓库都对应了一个域名，允许用户自定义项目首页，用来替代默认的源码列表。在每一个项目里，设置一个解析的文件，github会根据解析文件代码解析项目内容，并在此基础之上显示在你项目对应的github-page上，也就是一个具体的托管在github上的静态网页。不过这里需要注意的是，github解析项目文件的时候有两种方式
&lt;em&gt;注：你在github上的用户名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;，你有一个仓库&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;或一个仓库&lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1.解析名为&lt;code class=&quot;highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt;仓库下的&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;分支&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.解析名为&lt;code class=&quot;highlighter-rouge&quot;&gt;blog&lt;/code&gt;仓库下的&lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;分支&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jekyll是什么，jekyll是一个静态站点生成器，换句话说，它可以将你建立的网站源码生成一个静态页面。恰巧，github可以提供给你一个网站的域名和网站源码托管平台，所以就可以利用这两者搭建你的个人网站了。当然，静态站点生成器不止这一个，例如还有&lt;code class=&quot;highlighter-rouge&quot;&gt;Hexo&lt;/code&gt;,利用它同样可以生成炫酷的网站，但就个人而言，选择更加小巧简洁的jekyll。你也可以查看大牛&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;搭建一个最简单的博客的理解&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;二配置本地环境jekyll运行环境&quot;&gt;二、配置本地环境jekyll运行环境&lt;/h2&gt;
&lt;p&gt;在配置之前，建议将ubuntu的软件安装源更换为网易源&lt;a href=&quot;https://blog.csdn.net/shenlan18446744/article/details/51492451&quot;&gt;有需要请点击这里,忽略无关内容&lt;/a&gt;
打开终端 开始之前，先更新下软件,jekyll依赖于ruby，我们先安装ruby,官方需要ruby&amp;gt;2.0,我们安装2.3版本&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 安装ruby&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby2.3    //可以输入ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 查看安装版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 安装jekyll&lt;/strong&gt;
2.3版本的ruby是集成了gem的，我们需要使用gem 安装jekyll&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll            //可以输入jekyll &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; 查看安装版本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;如果提示&lt;code class=&quot;highlighter-rouge&quot;&gt;缺少gem&lt;/code&gt; ，可以输入&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rubygems

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;rb can't find header files for ruby&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby2.3-dev

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;如果提示&lt;code class=&quot;highlighter-rouge&quot;&gt;缺少依赖rdiscount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;rdiscount &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其他报错，请根据提示尝试解决～问度娘
&lt;strong&gt;3. 安装bunler&lt;/strong&gt;
bundler是在jekyll预览的时候用的，这里先安装&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;三使用jekyll建立本地站点&quot;&gt;三、使用jekyll建立本地站点&lt;/h2&gt;
&lt;p&gt;万事具备！开干！
打开终端，进入你的用户根目录，直接输入&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new blog_demo     //blog_demo是你的博客项目名称

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后你打开你的主文件夹图形界面就可以看到一个blog_demo文件，打开如图所示
&lt;img src=&quot;https://s1.ax1x.com/2018/04/29/CGQ5CQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回到终端&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;blog_demo    //进入项目目录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;启动jekyll预览本地站点&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;提示如下图，你可以在本地4000端口查看到站点已经建立好，在终端上右键&lt;code class=&quot;highlighter-rouge&quot;&gt;Server address&lt;/code&gt;
&lt;img src=&quot;https://s1.ax1x.com/2018/04/29/CGQI3j.png&quot; alt=&quot;ip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大吉大利，你的第一个博客建立好了！surprise！如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/04/29/CGQogs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后你回到图形界面主文件夹你可以看到多了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;的文件夹，此文件下是用来存放你在本地预览的时候建立的文件，但是我们一般上传源代码的时候，将它忽略，让git不再去管理这个文件。
回到终端，&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+c&lt;/code&gt;结束jekyll预览，新建&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把_site添加到文件内&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim .gitignore          //若没有安装vim，没事就问问度娘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在弹出的界面输入&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;进入插入模式，输入_site/*,按&lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt;后输入&lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;回车保存退出&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注：新版本的jekyll默认添加&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;文件，需要终端输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ll -l&lt;/code&gt;查看，若有，这一步跳过&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;四配置git-连接github&quot;&gt;四、配置Git 连接Github&lt;/h2&gt;
&lt;p&gt;以上都做好了的话，还配置一下git命令的运行环境，具体相关请查阅&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot;&gt;git中文手册&lt;/a&gt;
打开终端&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git       //安装GIT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1. 在github上申请一个账号&lt;/strong&gt;&lt;a href=&quot;https://github.com/&quot;&gt;申请地址&lt;/a&gt;
&lt;strong&gt;2. 然后如下在终端配置你Github注册的用户名和邮箱&lt;/strong&gt;，例如我的是&lt;code class=&quot;highlighter-rouge&quot;&gt;renyoulu&lt;/code&gt;,email：&lt;code class=&quot;highlighter-rouge&quot;&gt;Renyou_Lu@yeah.net&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; renyoulu      //更换成你的用户名
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; Renyou_Lu@yeah.net    //更换成你的邮箱地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3. 新建SSH-Key&lt;/strong&gt;
在新建SSH-key之前需要首先安装SSH,因为linux和mac已经有已经安装了SSH了，如果要查看是否已经安装，在终端输入&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;出现如下提示说明已经安装
&lt;img src=&quot;https://s1.ax1x.com/2018/04/30/CGtnFx.png&quot; alt=&quot;&quot; /&gt;
生成SHH-Key，在终端输入&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa   //需要连续输入三次回车
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;会看到如下提示，则说明已经生成成功
&lt;img src=&quot;https://s1.ax1x.com/2018/04/30/CGt16e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;生成的key默认存放在.ssh文件夹下，我们需要找到这个文件，并把公钥复制出来&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ssh
vim id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;输入&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;，选中复制&lt;code class=&quot;highlighter-rouge&quot;&gt;esc&lt;/code&gt;退出&lt;code class=&quot;highlighter-rouge&quot;&gt;：wq&lt;/code&gt;保存。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 添加SSH Key到GitHub&lt;/strong&gt;
接下来需要添加公钥到github上，打开你的github，点击头像,选择setting
&lt;img src=&quot;https://s1.ax1x.com/2018/04/30/CGtB6g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着
&lt;img src=&quot;https://s1.ax1x.com/2018/04/30/CGtDXQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击New SSH Key按钮后进行Key的填写操作，将复制的公钥填入key中，完成SSH-Key的添加。如下图：
&lt;img src=&quot;https://s1.ax1x.com/2018/04/30/CGt67n.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加SSH Key成功之后，继续输入命令进行测试&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@github.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果出现如下提示，则说明已经添加成功&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hi renyoulu! You’ve successfully authenticated, but GitHub does not provide shell access.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;五上传本地源代码&quot;&gt;五、上传本地源代码&lt;/h2&gt;
&lt;p&gt;好了，现在我们只剩下把本地的站点上传到github上了，继续！进入项目blog_demo根目录，打开终端&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
git checkout origin gh-pages
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;first post&quot;&lt;/span&gt;
git remote add origin https://github.com/renyoulu/blog_demo.git
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;等待大概1-2分钟之后，再次刷新https://renyoulu.github.io/blog_demo/，就能看到我们的blog。
还有一种方式是建立一个名为username.github.io的仓库，本地新建username.github.io的博客，上传到master分支即可。&lt;/p&gt;</content><author><name>Renyoulu</name><email>Renyou_Lu@yeah.net</email></author><category term="blog" /><category term="jeykll" /><category term="github" /><category term="Linux" /><summary type="html">一直以来都想自己建立一个个人网站，将自己的技术经验和想法分享到网上，今天终于实现了。本人从技术小白的角度分享一下自己在Linux环境下建立个人博客的经验，有讲错的欢迎指正。</summary></entry><entry><title type="html">我的第一篇博客</title><link href="http://localhost:4000/2018/04/25/first-blog.html" rel="alternate" type="text/html" title="我的第一篇博客" /><published>2018-04-25T00:00:00+08:00</published><updated>2018-04-25T00:00:00+08:00</updated><id>http://localhost:4000/2018/04/25/first-blog</id><content type="html" xml:base="http://localhost:4000/2018/04/25/first-blog.html">&lt;!--more--&gt;
&lt;h2 id=&quot;兴奋&quot;&gt;兴奋&lt;/h2&gt;
&lt;p&gt;终于把网站搭建起来了，这个网站是参考了田琦在&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/&quot;&gt;GITHUB&lt;/a&gt;的工程修改后得来的，使用了jekyll的框架，在自己的博客没有研究透彻之前，后续在仍旧使用这个博客系统。具体搭建的流程会在下面说明（现在太晚了，…….半夜醒来按耐不住兴奋发了这篇文章……..）&lt;/p&gt;</content><author><name>Renyoulu</name><email>Renyou_Lu@yeah.net</email></author><category term="first blog" /><category term="第一篇博客" /><summary type="html"></summary></entry></feed>